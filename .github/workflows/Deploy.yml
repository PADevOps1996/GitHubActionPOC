name: Java CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # CI Job - Build and Test
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK 11 (or another version)
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # Step 3: Build the project with Maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # Step 4: Verify the generated WAR file (list the contents of the target directory)
      - name: List files in target directory
        run: ls -l target/

      # Step 5: Upload the WAR file as an artifact for deployment
      - name: Upload WAR file as artifact
        uses: actions/upload-artifact@v3
        with:
          name: war-file
          path: target/*.war  # This path assumes your WAR file is in the 'target' directory after Maven build

  # CD Job - Deploy to EC2
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Step 1: Download the WAR file artifact from the previous build job
      - name: Download WAR file artifact
        uses: actions/download-artifact@v3
        with:
          name: war-file

      # Step 2: List the downloaded files (for verification)
      - name: List downloaded files
        run: ls -l

      # Step 3: Configure AWS credentials using GitHub Secrets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2  # Replace with your desired AWS region

      # Step 4: Retrieve the EC2 instance ID (using instance tag or name)
      - name: Retrieve EC2 instance ID
        id: ec2info
        run: |
          instance_id=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${{ secrets.EC2_INSTANCE_NAME }}" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text)
          echo "instance_id=$instance_id" >> $GITHUB_ENV
          echo "EC2 Instance ID: $instance_id"

      # Step 5: Deploy the WAR file to Tomcat on the EC2 instance using SSM
      - name: Deploy WAR file to EC2 via SSM
        run: |
          aws ssm send-command \
            --instance-ids "${{ env.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["sudo cp ./war-file/*.war /opt/tomcat/webapps/ROOT.war"]' \
            --comment "Deploying new WAR file to Tomcat"

      # Step 6: List the contents of Tomcat webapps directory on EC2 (verify the WAR file is copied)
      - name: Verify WAR file is copied to EC2
        run: |
          aws ssm send-command \
            --instance-ids "${{ env.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["ls -l /opt/tomcat/webapps/"]' \
            --comment "Checking if the ROOT.war file exists"

      # Step 7: Restart Tomcat to apply the new deployment
      - name: Restart Tomcat on EC2
        run: |
          aws ssm send-command \
            --instance-ids "${{ env.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["sudo systemctl restart tomcat"]' \
            --comment "Restarting Tomcat"

      # Step 8: Check Tomcat Status (Verify Tomcat is running)
      - name: Check Tomcat status
        run: |
          aws ssm send-command \
            --instance-ids "${{ env.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["sudo systemctl status tomcat"]' \
            --comment "Checking Tomcat status"

      # Step 9: Verify Deployment by Curling the Application URL
      - name: Check Deployment
        run: curl http://${{ secrets.AWS_EC2_HOST }}:8080/hello
