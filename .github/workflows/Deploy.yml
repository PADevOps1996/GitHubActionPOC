name: Java CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK 11
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # Step 3: Build the project with Maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # Step 4: Run tests
      - name: Run tests with Maven
        run: mvn test

      # Step 5: Archive the WAR file as an artifact for use in deployment
      - name: Upload WAR file as artifact
        uses: actions/upload-artifact@v3
        with:
          name: war-file
          path: target/*.war

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Step 1: Download the WAR file artifact
      - name: Download WAR file artifact
        uses: actions/download-artifact@v3
        with:
          name: war-file

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2  # Replace with your AWS region

      # Step 3: Use SSM to copy the WAR file and restart Tomcat
      - name: Deploy to EC2 using AWS SSM
        run: |
          instance_id=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${{ secrets.EC2_INSTANCE_NAME }}" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text)

          # Copy the WAR file to the EC2 instance using SSM
          aws ssm send-command \
            --instance-ids "$instance_id" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["sudo cp /path/to/downloaded/simple-webapp.war /var/lib/tomcat/webapps/ROOT.war"]' \
            --comment "Deploying new WAR file to Tomcat"

      # Step 4: Stop and start Tomcat via SSM
      - name: Restart Tomcat via SSM
        run: |
          instance_id=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${{ secrets.EC2_INSTANCE_NAME }}" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text)

          # Stop Tomcat
          aws ssm send-command \
            --instance-ids "$instance_id" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["sudo systemctl stop tomcat"]' \
            --comment "Stopping Tomcat"

          # Start Tomcat
          aws ssm send-command \
            --instance-ids "$instance_id" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["sudo systemctl start tomcat"]' \
            --comment "Starting Tomcat"

      # Step 5: Confirm deployment (optional)
      - name: Check Deployment
        run: curl http://${{ secrets.AWS_EC2_HOST }}/hello
